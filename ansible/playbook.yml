---
- hosts: rhel
  tasks:
    - name: Install required packages
      yum:
        name: "{{ required_packages }}"
        state: present

    - name: Create Machine Agent Directory
      file:
        path: "{{ machine_agent_directory }}"
        state: directory
        mode: "0755"

    - name: Download & decompress AppDynamics Machine Agent
      unarchive:
        src: "{{ machine_agent_source }}"
        dest: "{{ machine_agent_directory }}"
        remote_src: yes

    - name: Write controller host to Machine Agent configuration file
      xml:
        path: "{{ machine_agent_directory }}/conf/controller-info.xml"
        xpath: /controller-info/controller-host
        value: "{{ controller_host }}"

    - name: Write controller port to Machine Agent configuration file
      xml:
        path: "{{ machine_agent_directory }}/conf/controller-info.xml"
        xpath: /controller-info/controller-port
        value: "{{ controller_port }}"

    - name: Write Server Visibility Monitoring setting to Machine Agent configuration file
      xml:
        path: "{{ machine_agent_directory }}/conf/controller-info.xml"
        xpath: /controller-info/sim-enabled
        value: "{{ server_visibility_enabled }}"

    - name: Write account name to Machine Agent configuration file
      xml:
        path: "{{ machine_agent_directory }}/conf/controller-info.xml"
        xpath: /controller-info/account-name
        value: "{{ account_name }}"

    - name: Write account access key to Java Agent configuration file
      xml:
        path: "{{ machine_agent_directory }}/conf/controller-info.xml"
        xpath: /controller-info/account-access-key
        value: "{{ account_access_key }}"

    - name: Configure Machine Agent in systemd
      shell: |
        cat << EOF > "/lib/systemd/system/{{ machine_agent_systemd_service_name }}.service"
        [Unit]
        Description=AppDynamics Machine Agent

        [Service]
        ExecStart={{ machine_agent_directory }}/jre/bin/java -jar {{ machine_agent_directory }}/machineagent.jar
        KillMode=control-group
        Restart=on-failure
        RestartPreventExitStatus=255
        Type=simple
        TimeoutSec=900

        [Install]
        WantedBy=multi-user.target
        Alias={{ machine_agent_systemd_service_name}}.service
        EOF
      args:
        creates: "/lib/systemd/system/{{ machine_agent_systemd_service_name }}.service"

    - name: Create Network Agent Directory
      file:
        path: "{{ netviz_agent_directory }}"
        state: directory
        mode: "0755"

    - name: Download & decompress AppDynamics Network Agent
      unarchive:
        src: "{{ netviz_agent_source }}"
        dest: "{{ netviz_agent_directory }}"
        remote_src: yes

    - name: Install AppDynamics Network Agent
      shell: |
        bash -c "{{ netviz_agent_directory }}/install.sh"
        touch "{{ netviz_agent_directory }}/netviz.installed"
      args:
        creates: "{{ netviz_agent_directory }}/netviz.installed"

    - name: Configure Network Agent in systemd
      shell: |
        cat << EOF > "/lib/systemd/system/{{ netviz_agent_systemd_service_name }}.service"
        [Unit]
        Description=AppDynamics Network Agent
        After=network.target

        [Service]
        ExecStart={{ netviz_agent_directory }}/bin/start.sh
        KillMode=control-group
        Restart=always
        RestartPreventExitStatus=255
        Type=forking
        TimeoutSec=900

        [Install]
        WantedBy=multi-user.target
        Alias={{ netviz_agent_systemd_service_name}}.service
        EOF
      args:
        creates: "/lib/systemd/system/{{ netviz_agent_systemd_service_name }}.service"

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Start Machine Agent service
      service:
        name: "{{ machine_agent_systemd_service_name }}"
        enabled: true
        state: restarted

    - name: Start Network Agent service
      service:
        name: "{{ netviz_agent_systemd_service_name }}"
        enabled: true
        state: restarted

    - name: Create Tibco installer directory
      file:
        path: "{{ tibco_installer_directory }}"
        state: directory
        mode: "0755"

    - name: Send local download of Tibco EMS CE to Server
      copy:
        src: "{{ tibco_ems_ce_local_source }}"
        dest: "{{ tibco_installer_directory }}"
        owner: ec2-user
        group: ec2-user
        mode: '0744'
        force: yes 

    - name: Create Tibco installer directory
      file:
        path: "{{ tibco_installer_directory }}/tibco-ems-ce"
        state: directory
        mode: "0755"

    - name: Unzip Tibco EMS CE
      unarchive:
        src: "{{ tibco_installer_directory }}/{{ tibco_ems_installer_version }}.zip"
        dest: "{{ tibco_installer_directory }}/tibco-ems-ce/"
        remote_src: yes

    - name: Install Tibco EMS CE RPMs
      shell: |
        cd "{{ tibco_installer_directory }}/tibco-ems-ce/{{ tibco_ems_installer_unpacked_version_dir }}"
        yum install -y rpm/*.rpm
      args:
        creates: /opt/tibco

    - name: Create Tibco config directory
      file:
        path: "{{ tibco_config_directory }}"
        state: directory
        mode: "0755"

    - name: Write tibemsd.conf to config directory
      shell: |
        cat << EOF > "{{ tibco_config_directory }}/tibemsd.conf"
        server                  = EMS-SERVER
        password                = "{{ tibco_ems_password }}"
        users                   = "{{ tibco_config_directory }}/users.conf"
        groups                  = "{{ tibco_config_directory }}/groups.conf"
        topics                  = "{{ tibco_config_directory }}/topics.conf"
        queues                  = "{{ tibco_config_directory }}/queues.conf"
        acl_list                = "{{ tibco_config_directory }}/acl.conf"
        factories               = "{{ tibco_config_directory }}/factories.conf"
        routes                  = "{{ tibco_config_directory }}/routes.conf"
        bridges                 = "{{ tibco_config_directory }}/bridges.conf"
        transports              = "{{ tibco_config_directory }}/transports.conf"
        tibrvcm                 = "{{ tibco_config_directory }}/tibrvcm.conf"
        durables                = "{{ tibco_config_directory }}/durables.conf"
        channels                = "{{ tibco_config_directory }}/channels.conf"
        stores                  = "{{ tibco_config_directory }}/stores.conf"
        store                   = datastore
        max_connections         = 0
        max_msg_memory          = 512MB
        msg_swapping            = enabled
        listen                  = tcp://7222
        health_check_listen     =
        authorization           = disabled
        routing                 = disabled
        flow_control            = disabled
        multicast               = disabled
        tibftl_transports =
        tibrv_transports  =
        ftl_url                 =
        ftl_url_secondary       =
        ftl_username            =
        ftl_password            =
        ftl_log_level           =
        ftl_discard_policy      =
        ftl_discard_amount      =
        ftl_discard_max_events  =
        logfile                 =
        logfile_max_size        =
        log_trace               =
        console_trace           =
        server_rate_interval        = 1
        statistics                  = enabled
        rate_interval               = 3
        detailed_statistics         = NONE
        statistics_cleanup_interval = 30
        max_stat_memory             = 64MB
        track_message_ids       =
        track_correlation_ids   =
        ft_active               =
        ft_heartbeat            =
        ft_activation           =
        ft_reconnect_timeout    =
        ft_ssl_identity         =
        ft_ssl_issuer           =
        ft_ssl_private_key      =
        ft_ssl_password         =
        ft_ssl_trusted          =
        ft_ssl_verify_host      =
        ft_ssl_verify_hostname  =
        ft_ssl_expected_hostname=
        ft_ssl_ciphers          =
        module_path             =
        ssl_dh_size             =
        ssl_server_ciphers      =
        ssl_require_client_cert =
        ssl_require_route_cert_only =
        ssl_use_cert_username   =
        ssl_cert_user_specname  = CERTIFICATE_USER
        ssl_server_identity     =
        ssl_server_key          =
        ssl_password            =
        ssl_server_issuer       =
        ssl_server_trusted      =
        EOF

    - name: Write users.conf to config directory
      shell: |
        cat << EOF > "{{ tibco_config_directory }}/users.conf"
        admin::Administrator
        EMS-SERVER::Main Server
        EMS-SERVER2::Route Server        
        EOF

    - name: Write groups.conf to config directory
      shell: |
        cat << EOF > "{{ tibco_config_directory }}/groups.conf"
        $admin:"Administrators"
          admin
        EOF

    - name: Write topics.conf to config directory
      shell: |
        cat << EOF > "{{ tibco_config_directory }}/topics.conf"
        >
        topic.sample.exported   export=RV
        topic.sample.imported   import=RV

        sample
        topic.sample
        EOF

    - name: Write transports.conf to config directory
      shell: |
        cat << EOF > "{{ tibco_config_directory }}/transports.conf"
        [RV]
            type    = tibrv
            service =
            network =
            daemon  =
        EOF

    - name: Write channels.conf to config directory
      shell: |
        cat << EOF > "{{ tibco_config_directory }}/channels.conf"
        EOF
